// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model client {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String  @unique
  password String
  role     String?
  order    order[]
}

model category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  type      String
  recipe    recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model recipe {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  image        String?
  title        String
  description  String
  quantity     Int            @default(1)
  total        Float          @default(0.00)
  price        Float          @default(0.00)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category     category?      @relation(fields: [categoryId], references: [id])
  categoryId   String         @db.ObjectId
  orderDetails orderDetails[]
}

model order {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  subTotal     Float          @default(0.00)
  deliveryFee  Float          @default(0.00)
  delivery     delivery?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  client       client?        @relation(fields: [clientId], references: [id])
  clientId     String?        @db.ObjectId
  status       status         @default(CREATED)
  orderDetails orderDetails[]
}

enum status {
  CREATED
  PROCESSED
  DELIVERED
}

model orderDetails {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  recipe   recipe? @relation(fields: [recipeId], references: [id])
  recipeId String? @db.ObjectId
  quantity Int
  price    Float
  order    order?  @relation(fields: [orderId], references: [id])
  orderId  String? @db.ObjectId
}

model delivery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname    String
  email       String
  street_name String
  city        String
  state       String
  zipcode     String
  country     String
  phonenumber String
  order       order?   @relation(fields: [orderId], references: [id])
  orderId     String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
